package com.gzz.createcode.template.app;

import com.gzz.createcode.common.Utils;

public class AppService {
	public static StringBuilder create(String pName, String clsUpp, String auth, String cName, String idType, String lowUpp) {
		StringBuilder sb = new StringBuilder();
		sb.append("package " + pName + ";");
		sb.append("\r\n");
		sb.append("\r\nimport java.util.List;");
		sb.append("\r\nimport java.text.SimpleDateFormat;");
		sb.append("\r\n");
		sb.append("\r\nimport com.android.volley.Response;");
		sb.append("\r\nimport org.json.JSONObject;");
		sb.append("\r\nimport com.google.gson.Gson;");
		sb.append("\r\nimport com.google.gson.GsonBuilder;");
		sb.append("\r\nimport com.google.gson.reflect.TypeToken;");
		sb.append("\r\n");
		sb.append("\r\nimport com.cn.danceland.myapplication.bean.DLResult;");
		sb.append("\r\nimport com.cn.danceland.myapplication.bean.Page;");
		sb.append("\r\nimport com.cn.danceland.myapplication.utils.ToastUtils;");
		sb.append("\r\n");
		sb.append("\r\n/**");
		sb.append("\r\n * @友情提示: 请清理掉用不到的代码包括这段注释");
		sb.append("\r\n **/");
		sb.append(Utils.classNote(auth, cName + "--业务逻辑"));
		sb.append("\r\npublic class " + clsUpp + "Service {");
		sb.append("\r\n	private " + clsUpp + "Request request = new " + clsUpp + "Request();");
		sb.append("\r\n	private Gson gson = new GsonBuilder().setDateFormat(\"yyyy-MM-dd HH:mm:ss\").create();");
		sb.append("\r\n	private SimpleDateFormat sdf= new SimpleDateFormat(\"yyyy-MM-dd HH:mm:ss\");");
		sb.append("\r\n");
		sb.append(Utils.methodNote("新增" + cName));
		sb.append("\r\n	public void save() {");
		sb.append("\r\n		" + clsUpp + " " + lowUpp + " = new " + clsUpp + "();");
		sb.append("\r\n		// TODO 准备数据");
		sb.append("\r\n		request.save(" + lowUpp + ", new Response.Listener<JSONObject>() {");
		sb.append("\r\n			public void onResponse(JSONObject json) {");
		sb.append("\r\n				DLResult<Integer> result = gson.fromJson(json.toString(), new TypeToken<DLResult<Integer>>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					// TODO 请求据成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"保存数据失败,请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n");
		sb.append("\r\n	}");
		sb.append("\r\n");
		sb.append(Utils.methodNote("修改" + cName));
		sb.append("\r\n	public void update() {");
		sb.append("\r\n		" + clsUpp + " " + lowUpp + " = new " + clsUpp + "();");
		sb.append("\r\n		// TODO 准备数据");
		sb.append("\r\n		request.save(" + lowUpp + ", new Response.Listener<JSONObject>() {");
		sb.append("\r\n			public void onResponse(JSONObject json) {");
		sb.append("\r\n				DLResult<Integer> result = gson.fromJson(json.toString(), new TypeToken<DLResult<Integer>>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					// TODO 请求成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"修改数据失败,请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n");
		sb.append("\r\n	}");
		sb.append("\r\n");
		sb.append(Utils.methodNote("按主键删除" + cName));
		sb.append("\r\n	public void delete() {");
		sb.append("\r\n		" + idType + " id = null;");
		sb.append("\r\n		// TODO 准备数据");
		sb.append("\r\n		request.delete(id, new Response.Listener<String>() {");
		sb.append("\r\n			public void onResponse(String res) {");
		sb.append("\r\n				DLResult<Integer> result = gson.fromJson(res, new TypeToken<DLResult<Integer>>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					// TODO 请求成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"删除数据失败,请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n	}");
		sb.append("\r\n");
		sb.append(Utils.methodNote("按条件查询" + cName + "列表"));
		sb.append("\r\n	public void queryList() {");
		sb.append("\r\n		" + clsUpp + "Cond cond = new " + clsUpp + "Cond();");
		sb.append("\r\n		// TODO 准备查询条件");
		sb.append("\r\n		request.queryList(cond, new Response.Listener<JSONObject>() {");
		sb.append("\r\n			public void onResponse(JSONObject json) {");
		sb.append("\r\n				DLResult<List<" + clsUpp + ">> result = gson.fromJson(json.toString(), new TypeToken<DLResult<List<" + clsUpp + ">>>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					List<" + clsUpp + "> list = result.getData();");
		sb.append("\r\n					System.out.println(list);");
		sb.append("\r\n					// TODO 请求成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"查询分页列表失败,请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n	}");
		sb.append("\r\n");
		sb.append(Utils.methodNote("按条件查询" + cName + "分页列表"));
		sb.append("\r\n	public void queryPage() {");
		sb.append("\r\n		" + clsUpp + "Cond cond = new " + clsUpp + "Cond();");
		sb.append("\r\n		// TODO 准备查询条件");
		sb.append("\r\n		request.queryPage(cond, new Response.Listener<JSONObject>() {");
		sb.append("\r\n			public void onResponse(JSONObject json) {");
		sb.append("\r\n				// LogUtil.i(json.toString());");
		sb.append("\r\n				DLResult<Page<" + clsUpp + ">> result = gson.fromJson(json.toString(), new TypeToken<DLResult<Page<" + clsUpp + ">>>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					Page<" + clsUpp + "> page = result.getData();");
		sb.append("\r\n					List<" + clsUpp + "> list = page.getContent();");
		sb.append("\r\n					System.out.println(list);");
		sb.append("\r\n					// TODO 查询成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"查询列表失败,请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n");
		sb.append("\r\n	}");
		sb.append("\r\n");
		sb.append(Utils.methodNote("按主键查询单个" + cName));
		sb.append("\r\n	public void findById() {");
		sb.append("\r\n		" + idType + " id = null;");
		sb.append("\r\n		// TODO 准备数据");
		sb.append("\r\n		request.findById(id, new Response.Listener<String>() {");
		sb.append("\r\n			public void onResponse(String res) {");
		sb.append("\r\n				DLResult<" + clsUpp + "> result = gson.fromJson(res, new TypeToken<DLResult<" + clsUpp + ">>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					" + clsUpp + " " + lowUpp + " = result.getData();");
		sb.append("\r\n					System.out.println(" + lowUpp + ");");
		sb.append("\r\n					// TODO 查询成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n");
		sb.append("\r\n	}");
		sb.append("\r\n ");
		sb.append(Utils.methodNote("按条件查询" + cName + "数据个数"));
		sb.append("\r\n	public void queryCount() {");
		sb.append("\r\n		" + clsUpp + "Cond cond = new " + clsUpp + "Cond();");
		sb.append("\r\n		// TODO 准备查询条件");
		sb.append("\r\n		request.queryCount(cond, new Response.Listener<JSONObject>() {");
		sb.append("\r\n			public void onResponse(JSONObject json) {");
		sb.append("\r\n				DLResult<Long> result = gson.fromJson(json.toString(), new TypeToken<DLResult<Long>>() {");
		sb.append("\r\n				}.getType());");
		sb.append("\r\n				if (result.isSuccess()) {");
		sb.append("\r\n					Long count = result.getData();");
		sb.append("\r\n					System.out.println(count);");
		sb.append("\r\n					// TODO 请求成功后的代码");
		sb.append("\r\n				} else {");
		sb.append("\r\n					ToastUtils.showToastShort(\"查询分页列表失败,请检查手机网络！\");");
		sb.append("\r\n				}");
		sb.append("\r\n			}");
		sb.append("\r\n		});");
		sb.append("\r\n	}");
		sb.append("\r\n}");

		return sb;
	}
}
